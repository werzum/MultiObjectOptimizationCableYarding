Timer unit: 1e-09 s

Total time: 1.06053 s
File: /home/carlo/GitHub/MultiObjectOptimizationCableYarding/geometry_operations.py
Function: check_if_no_collisions at line 136

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   136                                           def check_if_no_collisions(possible_line, height_gdf, plot_possible_lines, view, pos):
   137                                               """A function to check whether there are any points along the line candidate (spanned up by the starting/end points elevation plus the support height) which are less than min_height away from the line.
   138                                               Returns
   139                                           
   140                                               Args:
   141                                                   possible_line (_type_): _description_
   142                                                   height_gdf (_type_): _description_
   143                                           
   144                                               Returns:
   145                                                   _type_: _description_
   146                                               """
   147         3       1333.0    444.3      0.0      support_height = 11
   148         3        374.0    124.7      0.0      min_height = 3
   149         3     150242.0  50080.7      0.0      start_point, end_point = Point(possible_line.coords[0]), Point(possible_line.coords[1])
   150                                           
   151                                               # find the elevation of the point in the height gdf closest to the line start point and end point
   152         3        498.0    166.0      0.0      max_deviation = 0.1
   153         3   17933318.0 5977772.7      1.7      start_point_height = fetch_point_elevation(start_point,height_gdf,max_deviation)+support_height
   154         3   17115499.0 5705166.3      1.6      end_point_height = fetch_point_elevation(end_point,height_gdf,max_deviation)+support_height
   155                                           
   156                                               # fetch the floor points along the line
   157         3    2061748.0 687249.3      0.2      points_along_line = generate_road_points(possible_line, interval = 2)
   158         3    2442336.0 814112.0      0.2      x_points, y_points = zip(*[(point.x, point.y) for point in points_along_line])
   159                                               # x_points = np.array(x_points)
   160                                               # y_points = np.array(y_points)
   161                                           
   162                                               # x_gdf = np.array(height_gdf.x)
   163                                               # y_gdf = np.array(height_gdf.y)
   164                                           
   165                                               # # create an x_points*x_gdf array where we test for each entry if it is between those values
   166                                               # condition_indices_x = np.logical_and(x_gdf[:,None]>x_points-1,x_gdf[:,None]<x_points+1)
   167                                               # condition_indices_y = np.logical_and(y_gdf[:,None]>y_points-1,y_gdf[:,None]<y_points+1)
   168                                           
   169                                               # # and now find the entries that satisfy this and take the first one each
   170                                               # floor_height_below_line_points = [height_gdf.loc[(condition_indices_x[:,index] & condition_indices_y[:,index]),"elev"].values[0] for index in range(len(x_points))]
   171                                           
   172                                               # and their height
   173         3 1011274774.0 337091591.3     95.4      floor_height_below_line_points = [height_gdf.loc[(height_gdf.x.between(x_points[i]-1,x_points[i]+1))&(height_gdf.y.between(y_points[i]-1,y_points[i]+1)),"elev"].values[0] for i in range(len(x_points))]
   174                                           
   175                                               # for point in list_of_points:
   176                                               #     height_gdf.loc[(height_gdf.x > point.x) & (height_gdf.x < point.x),"elev"]
   177                                           
   178                                               # height_gdf.loc[(height_gdf.x > point.x-max_deviation) & (height_gdf.x < point.x+max_deviation) &
   179                                               #  (height_gdf.y < point.y+max_deviation) & (height_gdf.y > point.y-max_deviation),"elev"].values[0]
   180                                           
   181                                           
   182                                               # floor_height_below_line_points = [fetch_point_elevation(point,height_gdf,max_deviation) for point in points_along_line]
   183                                           
   184                                               # 1. create arrays for start and end point
   185         3     177322.0  59107.3      0.0      line_start_point_array = np.array([start_point.x,start_point.y,start_point_height])
   186         3      45082.0  15027.3      0.0      line_end_point_array = np.array([end_point.x,end_point.y,end_point_height])
   187                                           
   188                                               # 2. get the rope lenght and compute ldh for every point along it
   189         3     118681.0  39560.3      0.0      c_rope_length = geometry_utilities.distance_between_3d_points(line_start_point_array,line_end_point_array)
   190                                               #exit the process if we have unrealistically low rope length
   191                                           
   192         3      49603.0  16534.3      0.0      b_whole_section = start_point.distance(end_point)
   193         3     922150.0 307383.3      0.1      ldh_array = np.array([lastdurchhang_at_point(point, start_point, end_point, c_rope_length, b_whole_section) for point in points_along_line])
   194                                           
   195                                               # 3. create an array of the floor points and their distance to the line (without slope)
   196         3    2449580.0 816526.7      0.2      floor_points = list(zip([point.x for point in points_along_line], [point.y for point in points_along_line],floor_height_below_line_points))
   197         3    5742110.0 1914036.7      0.5      line_to_floor_distances = [geometry_utilities.lineseg_dist(point,line_start_point_array, line_end_point_array) for point in floor_points]
   198                                           
   199                                               # and finally check the distances between each floor point and the ldh point
   200         3       8762.0   2920.7      0.0      sloped_line_to_floor_distances = line_to_floor_distances - ldh_array
   201                                           
   202                                               # return current supports if we are far away enough from the ground
   203         3      32731.0  10910.3      0.0      lowest_point_height = min(sloped_line_to_floor_distances)
   204                                           
   205                                               # plot the lines if true
   206         3        432.0    144.0      0.0      if plot_possible_lines:
   207                                                   plotting.plot_lines(floor_points,floor_height_below_line_points, sloped_line_to_floor_distances, view, pos)
   208                                           
   209         3       3717.0   1239.0      0.0      return_values_dict = {"sloped_line_to_floor_distances":sloped_line_to_floor_distances,"points_along_line":points_along_line, "start_point":start_point, "end_point":end_point, "no_collisions":True}
   210                                           
   211                                               #return false if line is too short
   212         3        929.0    309.7      0.0      if c_rope_length < 5:
   213                                                   return_values_dict["no_collisions"]=False
   214                                                   return return_values_dict
   215                                           
   216                                               # check if the line is above the ground
   217         3        550.0    183.3      0.0      if lowest_point_height>min_height:
   218         3        362.0    120.7      0.0          return return_values_dict
   219                                               else:
   220                                                   return_values_dict["no_collisions"]=False
   221                                                   return return_values_dict